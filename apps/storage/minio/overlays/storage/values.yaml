## minio mode, i.e. standalone or distributed
mode: standalone ## other supported values are "standalone"

## Typically the deployment/statefulset includes checksums of secrets/config,
## So that when these change on a subsequent helm install, the deployment/statefulset
## is restarted. This can result in unnecessary restarts under GitOps tooling such as
## flux, so set to "true" to disable this behaviour.
ignoreChartChecksums: true #false
minioAPIPort: "9000"
minioConsolePort: "9001"

deploymentUpdate:
  type: RollingUpdate
  # maxUnavailable: 0
  # maxSurge: 100%

## Update strategy for StatefulSets
statefulSetUpdate:
  updateStrategy: RollingUpdate

## Set default rootUser, rootPassword
## rootUser and rootPassword is generated when not set
## Distributed MinIO ref: https://min.io/docs/minio/linux/operations/install-deploy-manage/deploy-minio-multi-node-multi-drive.html
rootUser: ""
rootPassword: ""

existingSecret: "minio-secret"

## Directory on the MinIO pof
certsPath: "/etc/minio/certs/"
configPathmc: "/etc/minio/mc/"

## Path where PV would be mounted on the MinIO Pod
mountPath: "/export"
## Override the root directory which the minio server should serve from.
## If left empty, it defaults to the value of {{ .Values.mountPath }}
## If defined, it must be a sub-directory of the path specified in {{ .Values.mountPath }}
bucketRoot: ""

# Number of drives attached to a node
drivesPerNode: 1
# Number of MinIO containers running
replicas: 1
# Number of expanded MinIO clusters
pools: 1

## TLS Settings for MinIO
tls:
  enabled: false
  ## Create a secret with private.key and public.crt files and pass that here. Ref: https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
  certSecret: ""
  publicCrt: public.crt
  privateKey: private.key

## Trusted Certificates Settings for MinIO. Ref: https://min.io/docs/minio/linux/operations/network-encryption.html#third-party-certificate-authorities
## Bundle multiple trusted certificates into one secret and pass that here. Ref: https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
## When using self-signed certificates, remember to include MinIO's own certificate in the bundle with key public.crt.
## If certSecret is left empty and tls is enabled, this chart installs the public certificate from .Values.tls.certSecret.
trustedCertsSecret: ""

persistence:
  enabled: true
  existingClaim: "minio-pv-claim"

service:
  type: LoadBalancer
  clusterIP: ~
  port: "9000"
  nodePort: 32000
  loadBalancerIP: 192.168.40.187
  externalIPs: []
  annotations: {}

consoleService:
  type: LoadBalancer
  clusterIP: ~
  port: "9001"
  nodePort: 32001
  loadBalancerIP: 192.168.40.196
  externalIPs: []
  annotations: {}

nodeSelector:
  kubernetes.io/hostname: dev-k3s-master-0
affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/arch
          operator: In
          values:
          - amd64

## Add stateful containers to have security context, if enabled MinIO will run as this
## user and group NOTE: securityContext is only enabled if persistence.enabled=true
securityContext:
  enabled: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  fsGroupChangePolicy: "OnRootMismatch"

# Additational pod annotations
# podAnnotations:
#   prometheus.io/scrape: "true"
#   prometheus.io/path: "/minio/v2/metrics/cluster"
#   prometheus.io/port: "9000"

resources:
  requests:
    memory: 1.5Gi
  limits:
    memory: 2Gi

# Minio Buckets
buckets:
  - name: k3s-authentik
    objectlocking: false  # bucket [true|false] NOTE: versioning is enabled by default if you use locking
    policy: none
    purge: false
    versioning: false
  - name: k3s-authentik-backup
    objectlocking: false
    policy: none
    purge: false
    versioning: false
  - name: k3s-backend
    objectlocking: false
    policy: none
    purge: false
    versioning: false
  - name: k3s-audio
    objectlocking: false
    policy: none
    purge: false
    versioning: false
  - name: k3s-video
    objectlocking: false
    policy: none
    purge: false
    versioning: false
  - name: k3s-syncthing-backup
    objectlocking: false
    policy: none
    purge: false
    versioning: false
  - name: k3s-loki
    objectlocking: false
    policy: none
    purge: false
    versioning: false
  - name: k3s-longhorn-backup
    objectlocking: false
    policy: none
    purge: false
    versioning: false
  - name: k3s-tempo
    objectlocking: false
    policy: none
    purge: false
    versioning: false
  - name: k3s-temp
    objectlocking: false
    policy: none
    purge: false
    versioning: false

users:
  - accessKey: authentik
    existingSecret: minio-secret
    existingSecretKey: authentikPassword
    policy: authentik
  - accessKey: backend
    existingSecret: minio-secret
    existingSecretKey: backendPassword
    policy: backend
  - accessKey: loki
    existingSecret: minio-secret
    existingSecretKey: lokiPassword
    policy: loki
  - accessKey: lms
    existingSecret: minio-secret
    existingSecretKey: lmsPassword
    policy: lms
  - accessKey: syncthing
    existingSecret: minio-secret
    existingSecretKey: syncthingPassword
    policy: syncthing
  - accessKey: tempo
    existingSecret: minio-secret
    existingSecretKey: tempoPassword
    policy: tempo

policies:
  - name: loki
    statements:
      - resources:
          - 'arn:aws:s3:::k3s-loki'
          - 'arn:aws:s3:::k3s-loki/*'
        actions:
          - "s3:DeleteObject"
          - "s3:GetObject"
          - "s3:ListBucket"
          - "s3:PutObject"
  - name: tempo
    statements:
      - resources:
          - 'arn:aws:s3:::k3s-tempo'
          - 'arn:aws:s3:::k3s-tempo/*'
        actions:
          - "s3:DeleteObject"
          - "s3:GetObject"
          - "s3:ListBucket"
          - "s3:PutObject"
          - "s3:GetObjectTagging"
          - "s3:PutObjectTagging"
  - name: backend
    statements:
      - resources:
          - 'arn:aws:s3:::k3s-temp'
          - 'arn:aws:s3:::k3s-temp/*'
          - 'arn:aws:s3:::k3s-tempo'
          - 'arn:aws:s3:::k3s-tempo/*'
          - 'arn:aws:s3:::k3s-loki'
          - 'arn:aws:s3:::k3s-loki/*'
          - 'arn:aws:s3:::k3s-authentik'
          - 'arn:aws:s3:::k3s-authentik/*'
          - 'arn:aws:s3:::k3s-authentik-backup'
          - 'arn:aws:s3:::k3s-authentik-backup/*'
          - 'arn:aws:s3:::k3s-backend'
          - 'arn:aws:s3:::k3s-backend/*'
          - 'arn:aws:s3:::k3s-audio'
          - 'arn:aws:s3:::k3s-audio/*'
          - 'arn:aws:s3:::k3s-video'
          - 'arn:aws:s3:::k3s-video/*'
          - 'arn:aws:s3:::k3s-syncthing-backup'
          - 'arn:aws:s3:::k3s-syncthing-backup/*'
          - 'arn:aws:s3:::k3s-longhorn-backup'
          - 'arn:aws:s3:::k3s-longhorn-backup/*'
        actions:
          - "s3:AbortMultipartUpload"
          - "s3:GetObject"
          - "s3:DeleteObject"
          - "s3:PutObject"
          - "s3:ListMultipartUploadParts"
          - "s3:GetBucketLocation"
          - "s3:ListBucket"
          - "s3:ListBucketMultipartUploads"
      - name: lms
        statements:
          - resources:
              - 'arn:aws:s3:::k3s-audio/*'
            actions:
              - "s3:GetObject"
          - resources:
              - 'arn:aws:s3:::k3s-audio'
            actions:
              - "s3:GetBucketLocation"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"

      # - resources:
      #     - 'arn:aws:s3:::example*'
      #   actions:
      #     - "s3:CreateBucket"
      #     - "s3:DeleteBucket"
      #     - "s3:GetBucketLocation"
      #     - "s3:ListBucket"
      #     - "s3:ListBucketMultipartUploads"

## readonlyexamplepolicy policy grants access to buckets with name starting with example.
## In addition, grants objects read permissions on buckets starting with example.
# - name: readonlyexamplepolicy
#   statements:
#     - resources:
#         - 'arn:aws:s3:::example*/*'
#       actions:
#         - "s3:GetObject"
#     - resources:
#         - 'arn:aws:s3:::example*'
#       actions:
#         - "s3:GetBucketLocation"
#         - "s3:ListBucket"
#         - "s3:ListBucketMultipartUploads"

## Additional Annotations for the Kubernetes Job makePolicyJob
makePolicyJob:
  securityContext:
    enabled: false
    runAsUser: 1000
    runAsGroup: 1000
  resources:
    requests:
      memory: 128Mi
  # Command to run after the main command on exit
  exitCommand: ""

makeServiceAccountJob:
  securityContext:
    enabled: false
    runAsUser: 1000
    runAsGroup: 1000
  resources:
    requests:
      memory: 128Mi
  # Command to run after the main command on exit
  exitCommand: ""

## Specify the service account to use for the MinIO pods. If 'create' is set to 'false'
## and 'name' is left unspecified, the account 'default' will be used.
serviceAccount:
  create: true
  ## The name of the service account to use. If 'create' is 'true', a service account with that name
  ## will be created.
  name: "minio-sa"

metrics:
  serviceMonitor:
    enabled: true
    # scrape each node/pod individually for additional metrics
    includeNode: true
    public: true
    additionalLabels: {}
    annotations: {}
    # for node metrics
    relabelConfigs: {}
    # for cluster metrics
    relabelConfigsCluster: {}
      # metricRelabelings:
      #   - regex: (server|pod)
      #     action: labeldrop
    namespace: ~
    # Scrape interval, for example `interval: 30s`
    interval: 30s
    # Scrape timeout, for example `scrapeTimeout: 10s`
    scrapeTimeout: 10s

## ETCD settings: https://github.com/minio/minio/blob/master/docs/sts/etcd.md
## Define endpoints to enable this section.
etcd:
  endpoints: []
  pathPrefix: ""
  corednsPathPrefix: ""
  clientCert: ""
  clientCertKey: ""
