---
image:
  repository: esphome/esphome
  tag: ""
  pullPolicy: IfNotPresent
  pullSecrets: []

nameOverride: ""
fullnameOverride: ""
revisionHistoryLimit: 4
hostNetwork: false

replicas: 1
strategyType: RollingUpdate

serviceAccount:
  create: true
  annotations: {}
  automountServiceAccountToken: false

podAnnotations: {}
podLabels: {}

env: {}
extraEnv: {}

extraEnvSecrets: []
  # This will set ${MQTT_PASSWORD} to the 'password' key from the 'mqtt' secret
  # MQTT_PASSWORD:
  #   secret: mqtt
  #   key: password

## If you'd like to provide your own Kubernetes Secret object instead of passing your values
## individually, pass in the name of a created + populated Secret.
## All secrets will be mounted as environment variables, with each key/value mapping to a
## corresponding environment variable.
extraSecretForEnvFrom: []
# - esphome-secrets

podSecurityContext:
  privileged: true
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: 9100
  labels: {}
  type: LoadBalancer
  externalIPs: []
  loadBalancerIP: "192.168.40.184"
  externalTrafficPolicy: {}
  loadBalancerSourceRanges: []
  publishNotReadyAddresses: false
  httpPort: 6052
  metricsPort: 9100

monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: 9100
    labels: {}
    honorLabels: true
    interval: 60s
    selector: {}
    namespace: monitoring
    scrapeTimeout: 10s
    scheme: http
    tlsConfig: {}
    relabelings:
    - action: replace
      regex: ^(.*)$
      replacement: $1
      separator: ;
      sourceLabels:
      - __meta_kubernetes_pod_node_name
      targetLabel: nodename
    metricRelabelings:
    - action: keep
      regex: 'kube_(daemonset|deployment|pod|namespace|node|statefulset).+'
      sourceLabels:
      - __name__
    bearerTokenFile: {}
    # (use long lived access tokens)
    bearerTokenSecret: {}
      # name:
      # key:
      # optional:

livenessProbe:
  enabled: true
  periodSeconds: 60
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 6
  initialDelaySeconds: 30
readinessProbe:
  enabled: true
  periodSeconds: 60
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 6
  initialDelaySeconds: 30
# startupProbe:
#   enabled: true
#   successThreshold: 1
#   failureThreshold: 6

ingress:
  enabled: false
  # className: ""

# resources:
#   limits:
#     memory: 0.3Gi
#     cpu: 350m
#   requests:
#     memory: 0.2Gi
#     cpu: 150m

nodeSelector:
  kubernetes.io/hostname: dev-k3s-master-0
affinity: {}
tolerations: []

persistence:
  enabled: true
  existingClaim: 'esphome-pvc'

# persistence:
#   enabled: true
#   storageClass: longhorn-data
#   accessModes:
#   - ReadWriteOnce
#   # existingClaim: esphome-config-pvc-volume
#   resources:
#     requests:
#       storage: 4Gi


# Mount devices or folders from the host machine. Can be used for USB device mounting.
# hostMounts: []
  # Example
  # - name: zha
  #   hostPath: /dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_6120245D-if01-port0

autoscaling:
  enabled: false # test only (false)
  minReplicas: 1
  maxReplicas: 10
  averageCPUUtilizationPercentage: 50
  averageMemoryUtilizationPercentage: 50
