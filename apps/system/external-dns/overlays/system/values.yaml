---
dryRun: false
policy: upsert-only  # 'upsert-only' or 'sync'
clusterDomain: kubernetes.default.svc  # cluster.local
provider: aws

containerPorts:
  http: 7979

aws:
  ## AWS credentials
  ## @param aws.credentials.secretKey When using the AWS provider, set `aws_secret_access_key` in the AWS credentials (optional)
  ## @param aws.credentials.accessKey When using the AWS provider, set `aws_access_key_id` in the AWS credentials (optional)
  ## @param aws.credentials.mountPath When using the AWS provider, determine `mountPath` for `credentials` secret
  credentials:
    secretKey: ""
    accessKey: ""
    mountPath: "/.aws"
    ## @param aws.credentials.secretName Use an existing secret with key "credentials" defined.
    ## This ignores aws.credentials.secretKey, and aws.credentials.accessKey
    secretName: ""
    ## AWS access key id stored in key-value secret.
    ## If aws.credentials.accessKeyIDSecretRef and aws.credentials.secretAccessKeySecretRef defined aws.credentials.secretKey, aws.credentials.accessKey and aws.credentials.secretName are ignored
    ## @param aws.credentials.accessKeyIDSecretRef.name Define the name of the secret that stores aws_access_key_id.
    ## @param aws.credentials.accessKeyIDSecretRef.key Define the key of the secret that stores aws_access_key_id.
    accessKeyIDSecretRef:
      name: ""
      key: ""
    ## AWS secret access key stored in key-value secret
    ## @param aws.credentials.secretAccessKeySecretRef.name Define the name of the secret that stores aws_secret_access_key
    ## @param aws.credentials.secretAccessKeySecretRef.key Define the key of the secret that stores aws_secret_access_key
    secretAccessKeySecretRef:
      name: "external-dns"
      key: "secret-access-key"
  ## @param aws.region When using the AWS provider, `AWS_DEFAULT_REGION` to set in the environment (optional)
  region: eu-central-1
  ## @param aws.zoneType When using the AWS provider, filter for zones of this type (optional, options: public, private)
  zoneType: "public"
  ## @param aws.assumeRoleArn When using the AWS provider, assume role by specifying --aws-assume-role to the external-dns daemon
  assumeRoleArn: ""
  ## @param aws.roleArn Specify role ARN to the external-dns daemon
  roleArn: "arn:aws:iam::227651627371:role/dns-manager"
  ## @param aws.apiRetries Maximum number of retries for AWS API calls before giving up
  apiRetries: 3
  ## @param aws.batchChangeSize When using the AWS provider, set the maximum number of changes that will be applied in each batch
  batchChangeSize: 1000
  ## @param aws.zonesCacheDuration If the list of Route53 zones managed by ExternalDNS doesn't change frequently, cache it by setting a TTL
  ## (default 0 - disabled, can be set to time interval like 1m or 1h)
  zonesCacheDuration: 1h
  ## @param aws.zoneTags When using the AWS provider, filter for zones with these tags
  zoneTags: []
  ## @param aws.preferCNAME When using the AWS provider, replaces Alias records with CNAME (options: true, false)
  preferCNAME: ""
  ## @param aws.evaluateTargetHealth When using the AWS provider, sets the evaluate target health flag (options: true, false)
  evaluateTargetHealth: ""

## @param domainFilters Limit possible target zones by domain suffixes (optional)
domainFilters: []
## @param excludeDomains Exclude subdomains (optional)
excludeDomains: []
## @param regexDomainFilter Limit possible target zones by regex domain suffixes (optional)
## If regexDomainFilter is specified, domainFilters will be ignored
regexDomainFilter: ""
## @param regexDomainExclusion Exclude subdomains by using regex pattern (optional)
## If regexDomainFilter is specified, excludeDomains will be ignored and external-dns will use regexDomainExclusion even though regexDomainExclusion is empty
regexDomainExclusion: ""
## @param zoneNameFilters Filter target zones by zone domain (optional)
zoneNameFilters: []
## @param zoneIdFilters Limit possible target zones by zone id (optional)
zoneIdFilters: []
## @param annotationFilter Filter sources managed by external-dns via annotation using label selector (optional)
annotationFilter: ""
## @param labelFilter Select sources managed by external-dns using label selector (optional)
labelFilter: ""
## @param triggerLoopOnEvent When enabled, triggers run loop on create/update/delete events in addition to regular interval (optional)
triggerLoopOnEvent: false
## @param interval Interval update period to use
interval: "1m"
## @param logLevel Verbosity of the logs (options: panic, debug, info, warning, error, fatal, trace)
logLevel: info
## @param logFormat Which format to output logs in (options: text, json)
logFormat: text
registry: "txt"
txtPrefix: ""
txtSuffix: ""
txtOwnerId: "Z0010549388CLY75PMF8V"
forceTxtOwnerId: false
extraArgs: {}
extraEnvVars: []
replicaCount: 1
priorityClassName: ""

crd:
  create: false
  apiversion: ""
  kind: ""

service:
  enabled: true
  type: ClusterIP
  ports:
    http: 7979

serviceAccount:
  create: true
  name: ""
  annotations: {}
  automountServiceAccountToken: true
  labels: {}

rbac:
  create: true
  clusterRole: true
  apiVersion: v1
  pspEnabled: false

containerSecurityContext:
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop: ["ALL"]
# If you are deploying to AWS EKS and you want to leverage.
# You will need to override fsGroup and runAsUser with 65534(nfsnobody) and 0 respectively.
# Otherwise service account token will not be properly mounted.
podSecurityContext:
  enabled: true
  fsGroup: 65534  # 1001
  runAsUser: 0  # 1001

resources:
  requests:
    cpu: 250m
    memory: 300Mi
  limits:
    cpu: 500m
    memory: 300Mi

podDisruptionBudget: {}

## Prometheus Exporter / Metrics
metrics:
  enabled: true
  podAnnotations: {}
  serviceMonitor:
    enabled: true
    namespace: ""
    interval: ""
    scrapeTimeout: ""
    selector: {}
    metricRelabelings: []
    relabelings: []
    ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
    honorLabels: false
    ## DEPRECATED metrics.serviceMonitor.additionalLabels will be removed in a future release - Please use metrics.serviceMonitor.labels instead
    ## @param metrics.serviceMonitor.labels Used to pass Labels that are required by the installed Prometheus Operator
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
    labels: {}
    jobLabel: ""
  ## Google Managed Prometheus PodMonitor configuration
  googlePodMonitor:
    enabled: false
    namespace: ""
    interval: "60s"
    endpoint: /metrics
