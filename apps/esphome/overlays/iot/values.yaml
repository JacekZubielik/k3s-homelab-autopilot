---
image:
  repository: esphome/esphome
  tag: ""
  pullPolicy: IfNotPresent
  pullSecrets: []

nameOverride: ""
fullnameOverride: ""
revisionHistoryLimit: 4
hostNetwork: false

replicas: 1
strategyType: RollingUpdate

serviceAccount:
  create: true
  annotations: {}
  automountServiceAccountToken: true

podAnnotations: {}
podLabels: {}

env: {}
extraEnv: {}

extraEnvSecrets: []
  # This will set ${MQTT_PASSWORD} to the 'password' key from the 'mqtt' secret
  # MQTT_PASSWORD:
  #   secret: mqtt
  #   key: password

## If you'd like to provide your own Kubernetes Secret object instead of passing your values
## individually, pass in the name of a created + populated Secret.
## All secrets will be mounted as environment variables, with each key/value mapping to a
## corresponding environment variable.
extraSecretForEnvFrom: []
# - esphome-secrets

podSecurityContext:
  privileged: true
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  annotations: {}
    # prometheus.io/scrape: "false"
    # prometheus.io/port: {{ .Values.service.metricsPort }}
  labels: {}
  # type: LoadBalancer
  type: ClusterIP
  externalIPs: []
  # loadBalancerIP: "192.168.40.184"
  loadBalancerIP: ""
  externalTrafficPolicy: {}
  loadBalancerSourceRanges: []
  publishNotReadyAddresses: false
  httpPort: 6052
  metricsPort: 9100

monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    labels: {}
    honorLabels: true
    interval: 60s
    selector: {}
    namespace: {} #monitoring
    scrapeTimeout: 10s
    scheme: http
    tlsConfig: {}
    relabelings: []
    # - sourceLabels: [__meta_kubernetes_pod_node_name]
    #   separator: ;
    #   regex: ^(.*)$
    #   target_label: nodename
    #   replacement: $1
    #   action: replace
    metricRelabelings: []
    # - action: keep
    #   regex: 'kube_(daemonset|deployment|pod|namespace|node|statefulset).+'
    #   sourceLabels: [__name__]
    bearerTokenFile: {}
    # (use long lived access tokens)
    bearerTokenSecret: {}
      # name:
      # key:
      # optional:

livenessProbe:
  enabled: true
  # scheme: HTTP
  periodSeconds: 60
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 6
  initialDelaySeconds: 30
readinessProbe:
  enabled: true
  # scheme: HTTP
  periodSeconds: 60
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 6
  initialDelaySeconds: 30
startupProbe:
  enabled: true
  # scheme: HTTP
  successThreshold: 1
  failureThreshold: 6

ingress:
  enabled: false
  # className: ""
  annotations:
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/server-snippets: |
      location / {
        proxy_set_header Upgrade $http_upgrade;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header Connection "upgrade";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_cache_bypass $http_upgrade;
      }
  hosts:
    - host: esphome.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    []
    # - secretName: letsencrypt-staging
    #   hosts:
    #     - esphome.local

resources:
  limits:
    memory: 0.3Gi
    cpu: 350m
  requests:
    memory: 0.2Gi
    cpu: 150m

nodeSelector:
  kubernetes.io/hostname: dev-k3s-master-0
affinity: {}
tolerations: []

persistence:
  enabled: true
  existingClaim: 'config-esphome-pvc-volume'

# Mount devices or folders from the host machine. Can be used for USB device mounting.
# hostMounts: []
  # Example
  # - name: zha
  #   hostPath: /dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_6120245D-if01-port0

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  averageCPUUtilizationPercentage: 50
  averageMemoryUtilizationPercentage: 50
