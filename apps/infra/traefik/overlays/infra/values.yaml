# helm repo add traefik https://helm.traefik.io/traefik
# helm show values traefik/traefik  >> traefik-values.yaml
---
# core:
#   defaultRuleSyntax: v2

deployment:
  enabled: true
  kind: Deployment
  replicas: 1
  terminationGracePeriodSeconds: 60
  minReadySeconds: 0
  annotations: {}
  labels: {}
  podAnnotations: {}
  podLabels: {}
  additionalContainers: []
  # additionalVolumes:
  # - name: plugins
  # - name: traefik-logs

  # initContainers:
  #   - name: data-accesslog
  #     image: busybox:latest
  #     args:
  #       - /bin/sh
  #       - -c
  #       - tail -n+1 -F /data/access.log
  #     imagePullPolicy: Always
  #     resources: {}
  #     terminationMessagePath: /dev/termination-log
  #     terminationMessagePolicy: File
  #     volumeMounts:
  #     - name: data
  #       mountPath: /data

  shareProcessNamespace: true  # false
  dnsConfig: {}
  imagePullSecrets: []
  lifecycle: {}

# volumes:
#   - mountPath: /data
#     name: traefik-logs
#     type: configMap
# - name: public-cert
#   mountPath: "/certs"
#   type: secret

### Additional volumeMounts to add to the Traefik container
# additionalVolumeMounts:
# - name: traefik-logs
#   mountPath: /var/log/traefik
# - name: plugins
#   mountPath: /plugins-storage

# persistence:
#   enabled: true
#   name: data
#   #existingClaim: "traefik-logs"
#   accessMode: ReadWriteOnce
#   size: 128Mi
#   #storageClass: "local-path"
#   #volumeName: traefik-logs
#   path: /data
#   annotations: {}
#   # -- Only mount a subpath of the Volume into the pod
#   # subPath: ""

podDisruptionBudget:
  enabled: false
  # maxUnavailable: 1
  # maxUnavailable: 33%
  # minAvailable: 0
  # minAvailable: 25%

# -- Create a default IngressClass for Traefik
ingressClass:
  enabled: true
  isDefaultClass: true
  name: traefik-external

# experimental:
#   http3:
#     enabled: false
#   plugins:
#     enabled: true
#     fail2ban:
#       moduleName: "github.com/tomMoulard/fail2ban"
#       version: "v0.7.1"
#   kubernetesGateway:
#     # -- Enable traefik experimental GatewayClass CRD
#     enabled: false

ingressRoute:
  dashboard:
    enabled: false
    annotations: {}
    labels: {}
    matchRule: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
    entryPoints: ["traefik"]
    middlewares: []
    tls: {}
  healthcheck:
    enabled: false
    annotations: {}
    labels: {}
    matchRule: PathPrefix(`/ping`)
    entryPoints: ["traefik"]
    middlewares: []
    tls: {}

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 0
    maxSurge: 1

readinessProbe:
  failureThreshold: 1
  initialDelaySeconds: 2
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2
livenessProbe:
  failureThreshold: 3
  initialDelaySeconds: 2
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2

# startupProbe:

providers:
  kubernetesCRD:
    enabled: true
    allowCrossNamespace: true
    allowExternalNameServices: true
    allowEmptyServices: true
    ingressClass: traefik-external
    labelSelector: [] # labelSelector: "app=traefik" # environment=production,method=traefik # -- Array of namespaces to watch. If left empty, Traefik watches all namespaces.
    namespaces: [] # "argocd,cert-manager,default,dev,monitoring,prod,traefik,infra,longhorn-system,media,iot,iot-k3s,backup,storage,minio"

  kubernetesIngress:
    enabled: true
    allowExternalNameServices: true
    allowEmptyServices: true
    ingressClass: traefik-external
    labelSelector: []
    namespaces: [] # "argocd,cert-manager,default,dev,monitoring,prod,traefik,infra,longhorn-system,media,iot,iot-k3s,backup,storage,minio"

    ingressEndpoint:
      publishedService: "traefik/traefik"
      # Need to override path since otherwise the namespace is set as default
      pathOverride: traefik-system/traefik

  file:
    # -- Create a file provider
    enabled: false
    watch: true
    content: ""

logs:
  general:
    level: INFO   # -- DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
  access:
    enabled: true
    filters:
      statuscodes: "400-405,500"
      minDuration: "10ms"

entryPoints:
  metrics:
    address: 9100

metrics:
  prometheus:
    addEntryPointsLabels: true
    addRoutersLabels: true
    addServicesLabels: true
    entryPoint: metrics
    buckets: "0.5,1.0,5"
    headerLabels:
      label: headerKey
      useragent: User-Agent

  #  datadog:
  #    ## Address instructs exporter to send metrics to datadog-agent at this address.
  #    address: "127.0.0.1:8125"
  #    ## The interval used by the exporter to push metrics to datadog-agent. Default=10s
  #    # pushInterval: 30s
  #    ## The prefix to use for metrics collection. Default="traefik"
  #    # prefix: traefik
  #    ## Enable metrics on entry points. Default=true
  #    # addEntryPointsLabels: false
  #    ## Enable metrics on routers. Default=false
  #    # addRoutersLabels: true
  #    ## Enable metrics on services. Default=true
  #    # addServicesLabels: false

## Tracing -- https://doc.traefik.io/traefik/observability/tracing/overview/
# tracing:
#   serviceName: traefik
#  openTelemetry: # traefik v3+ only
#    grpc: true
#    insecure: true
#    address: localhost:4317
# instana:
#   localAgentHost: 127.0.0.1
#   localAgentPort: 42699
#   logLevel: info
#   enableAutoProfile: true
# datadog:
#   localAgentHostPort: 127.0.0.1:8126
#   debug: false
#   globalTag: ""
#   prioritySampling: false
  # elastic:
  #   serverURL: http://localhost:8200
#   secretToken: ""
#   serviceEnvironment: ""

# -- Global command arguments to be passed to all traefik's pods
globalArguments:
- "--global.checknewversion=false"
- "--global.sendanonymoususage=false"

# All available options available on https://docs.traefik.io/reference/static-configuration/cli/
## Use curly braces to pass values: `helm install --set="additionalArguments={--providers.kubernetesingress.ingressclass=traefik-internal,--log.level=DEBUG}"`
additionalArguments:
- "--api.dashboard=true"
- "--api.insecure=true"
- "--ping=true"
- "--accesslog.filepath=/data/access.log"
- "--entrypoints.websecure.http.tls=true"
- "--serversTransport.insecureSkipVerify=true"
- "--entryPoints.web.proxyProtocol.insecure"  # < --- for Hass
- "--entryPoints.web.forwardedHeaders.insecure"   # < --- for Hass

  # Shouldn't need this if you've got Cert Manager installed
  #
  # - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
  # - "--certificatesresolvers.letsencrypt.acme.email=<FIXME>"
  # - "--certificatesresolvers.letsencrypt.acme.storage=/data/acme.json"
  # - "--certificatesresolvers.letsencrypt-staging.acme.tlschallenge=true"
  # - "--certificatesresolvers.letsencrypt-staging.acme.email=<FIXME>"
  # - "--certificatesresolvers.letsencrypt-staging.acme.storage=/data/acme.json"
  # - "--certificatesresolvers.letsencrypt-staging.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"

# -- Environment variables to be passed to Traefik's binary
env:
  - name: TZ
    valueFrom:
      configMapKeyRef:
        name: traefik-tz
        key: TZ
# - name: POD_NAME
#   valueFrom:
#     fieldRef:
#       fieldPath: metadata.name
# - name: POD_NAMESPACE
#   valueFrom:
#     fieldRef:
#       fieldPath: metadata.namespace
# - name: SOME_VAR
#   value: some-var-value
# - name: SOME_VAR_FROM_CONFIG_MAP
#   valueFrom:
#     configMapRef:
#       name: configmap-name
#       key: config-key
# - name: SOME_SECRET
#   valueFrom:
#     secretKeyRef:
#       name: secret-name
#       key: secret-key

# -- Environment variables to be passed to Traefik's binary from configMaps or secrets
envFrom: []
# - configMapRef:
#     name: config-map-name
# - secretRef:
#     name: secret-name

# ports:
#   ping:
#     port: 8081
#   traefik:
#     port: 9000
#     expose: true
#     exposedPort: 9000
#     protocol: TCP
#   web:
#     redirectTo:
#       port: websecure
#     port: 80
#     expose: true
#     exposedPort: 80
#     protocol: TCP
#   websecure:
#     port: 443
#     expose: true
#     exposedPort: 443
#     protocol: TCP
#     # http3:
#     #   enabled: false
#     # advertisedPort: 4443
#     middlewares: []
#   metrics:
#     port: 9100
#     expose: true
#     exposedPort: 9100
#     protocol: TCP



ports:
  ping:
    port: 8081
  traefik:
    port: 9000
    expose:
      default: true
    exposedPort: 9000
    protocol: TCP
  web:
    redirectTo:
      port: websecure
    port: 80
    expose:
      default: true
    exposedPort: 80
    protocol: TCP
  websecure:
    port: 443
    expose:
      default: true
    exposedPort: 443
    protocol: TCP
    # http3:
    #   enabled: false
    # advertisedPort: 4443
    middlewares: []
  metrics:
    port: 9100
    expose:
      default: true
    exposedPort: 9100
    protocol: TCP

service:
  enabled: true
  single: true
  type: LoadBalancer
  annotations:
    kube-vip.io/loadbalancerIPs: "192.168.40.180"
    # metallb.universe.tf/loadBalancerIPs: "192.168.40.180"
    # service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    # service.beta.kubernetes.io/aws-load-balancer-type: nlb
    # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    # service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    # service.beta.kubernetes.io/aws-load-balancer-scheme: "internal"  # only available via VPN to internal networks

  annotationsTCP: {}
  annotationsUDP: {}
  labels: {}
  # spec:
  #   loadBalancerIP: 192.168.40.180 # this should be an IP in the MetalLB range
      # loadBalancerSourceRanges: []
        # - 192.168.0.1/32
        # - 172.16.0.0/16
  ## -- Class of the load balancer implementation
  # loadBalancerClass: service.k8s.aws/nlb
  externalIPs: []

# tls:
#   stores:
#     default:
#       defaultCertificate:
#         secretName: letsencrypt-production
#   options:
#     name: tls-ver13

serviceMonitor:
  metricRelabelings:
  - sourceLabels: [__name__]
    separator: ;
    regex: ^fluentd_output_status_buffer_(oldest|newest)_.+
    replacement: $1
    action: drop
  relabelings:
  - sourceLabels: [__meta_kubernetes_pod_node_name]
    separator: ;
    regex: ^(.*)$
    targetLabel: nodename
    replacement: $1
    action: replace
  jobLabel: traefik
  interval: 30s
  honorLabels: true
  # (Optional)
  # scrapeTimeout: 5s
  # honorTimestamps: true
  # enableHttp2: true
  # followRedirects: true
  # additionalLabels:
  #   foo: bar
  # namespace: "another-namespace"
  # namespaceSelector: {}
prometheusRule:
  additionalLabels: {}
  namespace: "monitoring"
  rules:
  - alert: TraefikDown
    expr: up{job="traefik"} == 0
    for: 5m
    labels:
      context: traefik
      severity: warning
    annotations:
      summary: "Traefik Down"
      description: "{{ $labels.pod }} on {{ $labels.nodename }} is down"

autoscaling:
  # Create HorizontalPodAutoscaler object.
  enabled: false
#   minReplicas: 1
#   maxReplicas: 10
#   metrics:
#   - type: Resource
#     resource:
#       name: cpu
#       target:
#         type: Utilization
#         averageUtilization: 60
#   - type: Resource
#     resource:
#       name: memory
#       target:
#         type: Utilization
#         averageUtilization: 60
#   behavior:
#     scaleDown:
#       stabilizationWindowSeconds: 300
#       policies:
#       - type: Pods
#         value: 1
#         periodSeconds: 60

# Certificates resolvers configuration
certResolvers: {}

hostNetwork: false

# Whether Role Based Access Control objects like roles and rolebindings should be created
rbac:
  enabled: true
  namespaced: false

# Enable to create a PodSecurityPolicy and assign it to the Service Account via RoleBinding or ClusterRoleBinding
podSecurityPolicy:
  enabled: false

# The service account the pods will use to interact with the Kubernetes API
# serviceAccount:
#   name: "traefik-ingress-controller"

serviceAccountAnnotations: {}
resources: {}
affinity: {}
  # podAntiAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #   - topologyKey: failure-domain.beta.kubernetes.io/zone
  #     labelSelector:
  #       matchExpressions:
  #       - key: app
  #         operator: In
  #         values:
  #         - traefik
nodeSelector: {}
tolerations: []

topologySpreadConstraints: []

# Pods can have priority.
# Priority indicates the importance of a Pod relative to other Pods.
priorityClassName: "system-cluster-critical"

# securityContext:
#   capabilities:
#     drop: [ALL]
#   readOnlyRootFilesystem: true
#   allowPrivilegeEscalation: false

securityContext:
  capabilities:
    drop: [ALL]
    add: [NET_BIND_SERVICE]
  readOnlyRootFilesystem: true
  runAsGroup: 0
  runAsNonRoot: false
  runAsUser: 0

podSecurityContext:
  fsGroupChangePolicy: "OnRootMismatch"
  runAsGroup: 65532
  runAsNonRoot: true
  runAsUser: 65532

# Extra objects to deploy (value evaluated as a template)
# extraObjects: []

# This will override the default Release Namespace for Helm.
# It will not affect optional CRDs such as `ServiceMonitor` and `PrometheusRules`
namespaceOverride: traefik
# This will override the default app.kubernetes.io/instance label for all Objects.
instanceLabelOverride: traefik

prometheus:
  enabled: true
  servicemonitor:
    enabled: true
    prometheusInstance: kube-prometheus-stack
    targetPort: 9100
    path: /metrics
    interval: 60s
    scrapeTimeout: 30s
    labels:
      release: kube-prometheus-stack
      prometheus.io/scrap-with: kube-prometheus-stack
    annotations: {}
    honorLabels: false
    endpointAdditionalProperties: {}

  # Note: Enabling both PodMonitor and ServiceMonitor is mutually exclusive, enabling both will result in a error.
  # podmonitor:
  #   enabled: false
  #   prometheusInstance: default
  #   path: /metrics
  #   interval: 60s
  #   scrapeTimeout: 30s
  #   labels: {}
  #   annotations: {}
  #   honorLabels: false
  #   endpointAdditionalProperties: {}
