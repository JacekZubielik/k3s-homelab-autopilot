kube-prometheus-stack:
  kubeControllerManager:
    enabled: true
  kubeEtcd:
    enabled: true
  kubeProxy:
    enabled: true
  kubeScheduler:
    enabled: true

  grafana:
    enabled: true
    defaultDashboardsTimezone: cet
    deploymentStrategy:
      type: Recreate

    # admin:
    #   existingSecret: grafana-admin-secret
    #   userKey: username
    #   passwordKey: password

    plugins:
    - grafana-piechart-panel


    persistence:
      enabled: true
      size: 10Gi
      accessModes: ["ReadWriteOnce"]
      storageClassName: "local-path"

    additionalDataSources:
      - name: Loki
        type: loki
        url: http://loki.loki:3100
        access: proxy
        isDefault: false
        version: 1

    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: true
          editable: false
          options:
            path: /var/lib/grafana/dashboards/default
        - name: 'device'
          orgId: 1
          folder: 'Devices Metrics'
          type: file
          disableDeletion: true
          editable: false
          options:
            path: /var/lib/grafana/dashboards/device
        - name: 'grafana-dashboards-kubernetes'
          orgId: 1
          folder: 'Kubernetes'
          type: file
          disableDeletion: true
          editable: false
          options:
            path: /var/lib/grafana/dashboards/grafana-dashboards-kubernetes

    dashboardsConfigMaps:
      device: "device-dashboards"

    dashboards:
      grafana-dashboards-kubernetes:
        k8s-system-api-server:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-api-server.json
          token: ''
        k8s-system-coredns:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-coredns.json
          token: ''
        k8s-views-global:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-global.json
          token: ''
        k8s-views-namespaces:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-namespaces.json
          token: ''
        k8s-views-nodes:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-nodes.json
          token: ''
        k8s-views-pods:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-pods.json
          token: ''
        cncf:
          url: https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/docs/src/samples/monitoring/grafana-dashboard.json
          token: ''
        argocd:
          url: https://raw.githubusercontent.com/argoproj/argo-cd/master/examples/dashboard.json
          token: ''

  alertmanager:
    config:
      global:
        resolve_timeout: 5m

    alertmanagerSpec:
      replicas: 2
      # useExistingSecret: true
      # configMaps:
      #   - alertmanager-telegram-template
      # configSecret: alertmanager-secret
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: alertmanager

      resources:
        requests:
          cpu: 10m
          memory: 40Mi
        limits:
          cpu: 200m
          memory: 250Mi

      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: local-path
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi

  nodeExporter:
    serviceMonitor:
      relabelings:
      - action: replace
        regex: (.*)
        replacement: $1
        sourceLabels:
        - __meta_kubernetes_pod_node_name
        targetLabel: kubernetes_node

  prometheus:
    prometheusSpec:
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      retention: 10d
      retentionSize: "10GB"
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      walCompression: true
      resources:
        requests:
          memory: 400Mi
          cpu: 1
        limits:
          cpu: 2
          memory: 800Mi

      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            storageClassName: "local-host"
            resources:
              requests:
                storage: 10Gi
